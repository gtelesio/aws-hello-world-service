name: 🧪 Run Tests

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: app
        run: npm ci
        
      - name: 🔍 Run linting
        working-directory: app
        run: npm run lint
        
      - name: 🧪 Run tests
        working-directory: app
        run: npm run test
        
      - name: 📊 Generate coverage report
        working-directory: app
        run: npm run test:coverage
        
      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: app/coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: 📋 Test summary
        if: always()
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version:** ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** Generated and uploaded" >> $GITHUB_STEP_SUMMARY

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: app
        run: npm ci
        
      - name: 🔒 Run security audit
        working-directory: app
        run: npm audit --audit-level=moderate
        
      - name: 🔍 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          working-directory: app

  build:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: app
        run: npm ci
        
      - name: 🏗️ Build project
        working-directory: app
        run: npm run build
        
      - name: ✅ Verify build output
        working-directory: app
        run: |
          if [ -d "dist" ]; then
            echo "✅ Build successful - dist directory created"
            ls -la dist/
          else
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi

  quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: app
        run: npm ci
        
      - name: 🔍 Run ESLint
        working-directory: app
        run: npm run lint
        
      - name: 💅 Check code formatting
        working-directory: app
        run: npm run format:check
        
      - name: 📋 Quality summary
        if: always()
        run: |
          echo "## 📊 Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "- **ESLint:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Prettier:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Style:** ✅ Consistent" >> $GITHUB_STEP_SUMMARY
